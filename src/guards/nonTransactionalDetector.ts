/**
 * Áã¨Á´ã„Ç¨„Éº„ÉâÔºö‰æã„ÉªÊ°àÂÜÖ„É°„Éº„É´„ÇíË∂ÖÈôêÂÆöÊù°‰ª∂„ÅßÈô§Â§ñ
 * 
 * Êó¢Â≠ò„ÅÆÊäΩÂá∫„É≠„Ç∏„ÉÉ„ÇØ„Å´‰∏ÄÂàáËß¶„Çå„Åö„ÄÅ‰øùÂ≠òÁõ¥Ââç„Å´ÂÆâÂÖ®Èô§Â§ñ„Åô„Çã„Åü„ÇÅ„ÅÆ„É¢„Ç∏„É•„Éº„É´
 * 3ÊÆµÈöé„ÅÆÂé≥Ê†ºÊù°‰ª∂„Åß„ÄÅOlive„ÅÆ„ÄåÂ•ëÁ¥ÑÊ°àÂÜÖÔºã„ÅäÊîØÊâï„ÅÑ‰æã„ÄçÁ≠â„ÅÆ„Åø„Çí„Éî„É≥„Éù„Ç§„É≥„ÉàÈô§Â§ñ
 */

export type MailLike = { 
  from: string; 
  subject: string; 
  text: string; 
};

// Ê°àÂÜÖÁ≥ª„Ç≠„Éº„ÉØ„Éº„ÉâÔºà‰ª∂Âêç„ÉªÊú¨ÊñáÔºâ
const ANNOUNCEMENT_HINT = /(ÈáçË¶Å„Å™„ÅäÁü•„Çâ„Åõ|„ÅîÊ°àÂÜÖ|Â•ëÁ¥ÑÂÜÖÂÆπ|Ë®≠ÂÆöÊâãÁ∂ö|„Éï„É¨„Ç≠„Ç∑„Éñ„É´„Éö„Ç§|„ÅîÂ•ëÁ¥ÑÂÜÖÂÆπ|„ÅäÊâãÁ∂ö„Åç|„Çµ„Éº„Éì„ÇπÈñãÂßã)/i;

// ‰æãÁ§∫„Éª„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Á≥ª„Ç≠„Éº„ÉØ„Éº„ÉâÔºàÈáëÈ°çËøëÂÇçÁî®Ôºâ
const EXAMPLE_HINT_NEAR = /(„ÅäÊîØÊâï„ÅÑ‰æã|ÊîØÊâï‰æã|„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥|„Çµ„É≥„Éó„É´|ÂèÇËÄÉ|‰æã„Å®„Åó„Å¶|„ÅîÂà©Áî®‰æã|„ÅäÊîØÊâï„ÅÑ„Ç§„É°„Éº„Ç∏)/i;

// ÈáëÈ°ç„Éë„Çø„Éº„É≥ÔºàÊó¢Â≠ò„Å®ÂêåÊßòÔºâ
const AMOUNT_ANY = /[¬•Ôø•]?\s*[0-9Ôºê-Ôºô,Ôºå]+\s*ÂÜÜ/ig;

// ÈÄÅ‰ø°ÂÖÉ„ÅÆ"Ê°àÂÜÖÂ∞ÇÁî®"„Å£„ÅΩ„ÅÑÂé≥Ê†º„Éâ„É°„Ç§„É≥/„Ç¢„Éâ„É¨„ÇπÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Â¢ó„ÇÑ„ÅôÔºâ
const ANNOUNCEMENT_SENDERS = [
  'mail@contact.vpass.ne.jp', // ‰∏â‰∫ï‰ΩèÂèã Olive Ê°àÂÜÖ
  'info@vpass.ne.jp',         // ‰∏â‰∫ï‰ΩèÂèã Ê°àÂÜÖÁ≥ª
  'noreply@smbc-card.com',    // SMBC Ê°àÂÜÖÁ≥ª
  // ÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†
];

/**
 * ÈùûÂèñÂºï„É°„Éº„É´Ôºà‰æã„ÉªÊ°àÂÜÖÔºâÂà§ÂÆö
 * 
 * @param mail „É°„Éº„É´ÊÉÖÂ†±
 * @returns true = ÂèñÂºï„Åò„ÇÉ„Å™„ÅÑÔºà‰æã„ÉªÊ°àÂÜÖÔºâ/ false = ÈÄöÂ∏∏Âá¶ÁêÜ
 */
export function isNonTransactionalAnnouncement(mail: MailLike): boolean {
  const from = (mail.from || '').toLowerCase();
  const subj = mail.subject || '';
  const text = mail.text || '';

  // 1) ÈÄÅ‰ø°ÂÖÉ„ÅåÊ°àÂÜÖÁ≥ªÔºàÂº∑Êù°‰ª∂Ôºâ
  const fromHit = ANNOUNCEMENT_SENDERS.some(dom => from.includes(dom.toLowerCase()));
  if (!fromHit) return false;

  // 2) ‰ª∂Âêç/Êú¨Êñá„Å´„ÄåÊ°àÂÜÖ„ÉªÂ•ëÁ¥Ñ„ÉªË®≠ÂÆö„ÄçÔºàÂº∑Êù°‰ª∂Ôºâ
  if (!ANNOUNCEMENT_HINT.test(subj + ' ' + text)) return false;

  // 3) ÈáëÈ°ç„ÅÆ"ËøëÂÇç ¬±30ÊñáÂ≠ó"„Å´‰æãÁ§∫„ÉØ„Éº„ÉâÔºàÂº∑Êù°‰ª∂Ôºâ
  const normalizedText = text.replace(/\s+/g, ' ');
  let match: RegExpExecArray | null;
  AMOUNT_ANY.lastIndex = 0;
  
  while ((match = AMOUNT_ANY.exec(normalizedText)) !== null) {
    const matchIndex = match.index;
    const windowStart = Math.max(0, matchIndex - 30);
    const windowEnd = Math.min(normalizedText.length, matchIndex + match[0].length + 30);
    const contextWindow = normalizedText.slice(windowStart, windowEnd);
    
    if (EXAMPLE_HINT_NEAR.test(contextWindow)) {
      console.log('üõ°Ô∏è Example amount detected in context:', {
        amount: match[0],
        context: contextWindow,
        from: mail.from
      });
      return true; // ‰æãÁ§∫ÈáëÈ°ç„Å™„ÅÆ„ÅßÈùûÂèñÂºïÊâ±„ÅÑ
    }
  }

  return false;
}

/**
 * „Éá„Éê„ÉÉ„Ç∞Áî®ÔºöÂà§ÂÆöÁêÜÁî±„ÅÆË©≥Á¥∞
 */
export function analyzeNonTransactional(mail: MailLike): {
  isNonTransactional: boolean;
  reasons: string[];
} {
  const reasons: string[] = [];
  const from = (mail.from || '').toLowerCase();
  const subj = mail.subject || '';
  const text = mail.text || '';

  // ÈÄÅ‰ø°ÂÖÉ„ÉÅ„Çß„ÉÉ„ÇØ
  const fromHit = ANNOUNCEMENT_SENDERS.some(dom => {
    const hit = from.includes(dom.toLowerCase());
    if (hit) reasons.push(`Sender match: ${dom}`);
    return hit;
  });

  if (!fromHit) {
    reasons.push('No announcement sender match');
    return { isNonTransactional: false, reasons };
  }

  // Ê°àÂÜÖ„Ç≠„Éº„ÉØ„Éº„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
  const announcementHit = ANNOUNCEMENT_HINT.test(subj + ' ' + text);
  if (!announcementHit) {
    reasons.push('No announcement keywords found');
    return { isNonTransactional: false, reasons };
  }
  reasons.push('Announcement keywords found');

  // ‰æãÁ§∫ÈáëÈ°ç„ÉÅ„Çß„ÉÉ„ÇØ
  const normalizedText = text.replace(/\s+/g, ' ');
  let match: RegExpExecArray | null;
  AMOUNT_ANY.lastIndex = 0;
  
  while ((match = AMOUNT_ANY.exec(normalizedText)) !== null) {
    const matchIndex = match.index;
    const contextWindow = normalizedText.slice(
      Math.max(0, matchIndex - 30), 
      Math.min(normalizedText.length, matchIndex + match[0].length + 30)
    );
    
    if (EXAMPLE_HINT_NEAR.test(contextWindow)) {
      reasons.push(`Example amount found: ${match[0]} in context "${contextWindow}"`);
      return { isNonTransactional: true, reasons };
    }
  }

  reasons.push('No example amounts in context');
  return { isNonTransactional: false, reasons };
}